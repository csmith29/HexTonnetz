
package hextonnetz;

import static hextonnetz.HexTransitionRules.*;
import static mylibrary.PrintArrays.*;
import static mylibrary.JMusicQuick.*;
import static mylibrary.Operations.*;

import jm.JMC;

public class HexTonnetz implements JMC {

    public static int[][] tonHex(int lowNote) {
        int[][] tonnetz = new int[24][24];
        for (int i = 0; i < 12; i++) {
            for (int j = 0; j < 12; j++) {
                tonnetz[2*i][2*j] = lowNote + i + 7*j;
                tonnetz[2*i + 1][2*j + 1] = lowNote + 4 + i + 7*j;
            }//for j
        } //for i
        return tonnetz;
    } //tonRow(int)
    
    public static final int[][] TONHEX = tonHex(12);
    
    public static int[][] tonHex8(int lowNote) {
        int[][] tonnetz = tonHex(0);
        for (int i = 0; i < 12; i++) {
            for (int j = 0; j < 12; j++) {
                tonnetz[2*i][2*j] %= 12;
                tonnetz[2*i + 1][2*j + 1] %= 12;
                tonnetz[2*i][2*j] += lowNote;
                tonnetz[2*i + 1][2*j + 1] += lowNote;
            } //for j
        } //for i
        return tonnetz;
    } //tonHex8(int)
    
    public static final int[][] TONHEX8 = tonHex8(60);
    
    public static int[] randomWalk(int length) {
        int[] pitchArray = new int[length];
        HexNote note = new HexNote(12, 12);
        pitchArray[0] = note.getPitch();
        for (int t = 1; t < length; t++) {
            note.randomStep();
            pitchArray[t] = note.getPitch();
        } //for t
        return pitchArray;
    } //randomWalk(int)
    
    public static int[] testNotes(int length, HexNote avgPitch) {
        int[] pitchArray = new int[length];
        HexNote currentPitch = avgPitch;
        pitchArray[0] = currentPitch.getPitch();
        for (int t = 1; t < length; t++) {
            currentPitch = currentPitch.nextNeighbor(avgPitch.getPitch());
            pitchArray[t] = currentPitch.getPitch();
        } //for t
        return pitchArray;
    } //testNotes(int, HexNote)
    
    public static int[] testNNotes(int length, HexNote avgPitch) {
        int[] pitchArray = new int[length];
        HexNote currentPitch = avgPitch;
        pitchArray[0] = currentPitch.getPitch();
        for (int t = 1; t < length; t++) {
            currentPitch = currentPitch.nextNNote(avgPitch.getPitch());
            pitchArray[t] = currentPitch.getPitch();
        } //for t
        return pitchArray;
    } //testNotes(int, HexNote)
    
    public static double[] evenParts(int things) {
        double[] result = new double[things];
        double p = 1.0/(double)(things);
        for (int i = 0; i < things; i++) {
            result[i] = p;
        } //for i
        return result;
    } //evenParts(int)
    
    public static final HexNote MIDDLEC = new HexNote(12, 12);
    
    public static void main(String[] args) {
        printArray(TONHEX);
        
        int[] pitchArray = testNNotes(100, MIDDLEC);
        printArray(pitchArray);
        play(pitchArray, 0.25);
        //write(pitchArray, 0.25, "CBluesRandomHexWalk");
        
        HexNote avgNote = MIDDLEC;
        HexNote hiNote = new HexNote(7, 17);
        HexNote loNote = new HexNote(14, 8);
        HexNote midNote = new HexNote(12, 14);
        printArray(avgNote.neighborRatings(avgNote.getPitch()));
        printArray(hiNote.neighborRatings(avgNote.getPitch()));
        printArray(loNote.neighborRatings(avgNote.getPitch()));
        printArray(midNote.neighborRatings(avgNote.getPitch()));
        
        System.out.println(inCMajor(84));
    } //main(String[])
    
} //HexTonnetz
