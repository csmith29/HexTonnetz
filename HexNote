
package hextonnetz;

import java.util.*;

import static hextonnetz.HexTonnetz.*;
import static hextonnetz.HexTransitionRules.*;
import static mylibrary.Operations.*;

public class HexNote {
    
    //fields
    private int row;
    private int column;
    private int pitch;
    
    //constructor
    public HexNote(int rowInit, int columnInit) {
        row = rowInit;
        column = columnInit;
        pitch = TONHEX[row][column];
    } //HexNote(int, int)
    
    
    
    //toString() method (for printing)
    @Override
    public String toString() {
        return "location: (" + row + "," + column + ")   pitch: " + pitch;
    } //toString()
    
    //accessors
    public int getPitch() {
        return pitch;
    } //getPitch()
    
    //method to set note (use after changing row and/or column)
    public void setPitch() {
        pitch = TONHEX[row][column];
    } //setPitch()
    
    /*
    changeNote(int, int) changes the note, whereas changeNote(int, int) defines
    the next note, so the original note is unchanged.
     */
    public void changeNote(int i, int j) {
        row = mod(row + i, 24);
        column = mod(column + j, 24);
        setPitch();
    } //changeNote(int, int)
    public HexNote nextNote(int i, int j) {
        int nextRow = mod(row + i, 24);
        int nextColumn = mod(column + j, 24);
        HexNote next = new HexNote(nextRow, nextColumn);
        return next;
    } //nextNote(int, int)
    
    
    //methods to move to neighboring notes
    public void left() {
        changeNote(0, -2);
    } //left()
    public void upLeft() {
        changeNote(-1, -1);
    } //upLeft()
    public void upRight() {
        changeNote(-1, 1);
    } //upRight()
    public void right() {
        changeNote(0, 2);
    } //right()
    public void downRight() {
        changeNote(1, 1);
    } //downRight()
    public void downLeft() {
        changeNote(1, -1);
    } //downLeft()
    
    public void randomStep() {
        double p = 0.1666666666666666666666666666666666666666666666666666666667;
        double r = Math.random();
        if (r < p) left();
        else if (r < 2*p) upLeft();
        else if (r < 3*p) upRight();
        else if (r < 4*p) right();
        else if (r < 5*p) downRight();
        else downLeft();
    } //randomStep()
    
    public void m2Up() {
        changeNote(2, 0);
    } //m2Up()
    public void m2Down() {
        changeNote(-2, 0);
    } //m2Down()
    
    public void M2Up() {
        changeNote(-3, 1);
    } //M2Up()
    public void M2Down() {
        changeNote(3, -1);
    } //M2Down()
    
    public void m3Up() {
        changeNote(-1, 1);
    } //m3Up()
    public void m3Down() {
        changeNote(1, -1);
    } //m3Down()
    
    public void M3Up() {
        changeNote(1, 1);
    } //M3Up()
    public void M3Down() {
        changeNote(-1, -1);
    } //M3Down()
    
    public void P4Up() {
        changeNote(3, 1);
    } //P4Up()
    public void P4Down() {
        changeNote(-3, -1);
    } //P4Down()
    
    public void TTUp() {
        changeNote(-2, 2);
    } //TTUp()
    public void TTDown() {
        changeNote(2, -2);
    } //TTDown()
    
    public void P5Up() {
        changeNote(0, 2);
    } //P5Up()
    public void P5Down() {
        changeNote(0, -2);
    } //P5Down()
    
    public void m6Up() {
        changeNote(2, 2);
    } //m6Up()
    public void m6Down() {
        changeNote(-2, -2);
    } //m6Down()
    
    public void M6Up() {
        changeNote(-3, 3);
    } //M6Up()
    public void M6Down() {
        changeNote(3, -3);
    } //M6Down()
    
    public void m7Up() {
        changeNote(-1, 3);
    } //m7Up()
    public void m7Down() {
        changeNote(1, -3);
    } //m7Down()
    
    public void M7Up() {
        changeNote(1, 3);
    } //M7Up()
    public void M7Down() {
        changeNote(-1, -3);
    } //M7Down()
    
    public void P8Up() {
        changeNote(3, 3);
    } //P8Up()
    public void P8Down() {
        changeNote(-3, -3);
    } //P8Down()
    
    //methods to move to neighboring notes
    public HexNote nextLeft() {
        return nextNote(0, -2);
    } //nextLeft()
    public HexNote nextUpLeft() {
        return nextNote(-1, -1);
    } //nextUpLeft()
    public HexNote nextUpRight() {
        return nextNote(-1, 1);
    } //nextUpRight()
    public HexNote nextRight() {
        return nextNote(0, 2);
    } //nextRight()
    public HexNote nextDownRight() {
        return nextNote(1, 1);
    } //nextDownRight()
    public HexNote nextDownLeft() {
        return nextNote(1, -1);
    } //nextDownLeft()
    
    public HexNote randomNextNeighbor(double[] probs) {
        List<HexNote> next = new ArrayList<>();
        next.add(this);
        next.add(this.nextLeft());
        next.add(this.nextUpLeft());
        next.add(this.nextUpRight());
        next.add(this.nextRight());
        next.add(this.nextDownRight());
        next.add(this.nextDownLeft());
        double r = Math.random();
        double sum = 0.0;
        int count = -1;
        while (!(r < sum) && count < 7) {
            count++;
            sum += probs[count];
        } //while
        return next.get(count);
    } //randomNextNeighbor(double[])
    
    public HexNote nextNeighbor(int avgPitch) {
        List<HexNote> next = new ArrayList<>();
        next.add(this);
        next.add(this.nextLeft());
        next.add(this.nextUpLeft());
        next.add(this.nextUpRight());
        next.add(this.nextRight());
        next.add(this.nextDownRight());
        next.add(this.nextDownLeft());
        double[] ratings = new double[7];
        for (int i = 0; i < 7; i++) {
            double rating = rating(this.getPitch(), next.get(i).getPitch(), avgPitch);
            ratings[i] = rating;
        } //for i
        double[] probs = probabilities(ratings);
        double r = Math.random();
        double sum = 0.0;
        int count = -1;
        while (!(r < sum) && count < 7) {
            count++;
            sum += probs[count];
        } //while
        return next.get(count);
    } //nextNeighbor(double[], int)
    
    public double[] neighborRatings(int avgPitch) {
        List<HexNote> next = new ArrayList<>();
        next.add(this);
        next.add(this.nextLeft());
        next.add(this.nextUpLeft());
        next.add(this.nextUpRight());
        next.add(this.nextRight());
        next.add(this.nextDownRight());
        next.add(this.nextDownLeft());
        double[] ratings = new double[7];
        for (int i = 0; i < 7; i++) {
            double rating = rating(this.getPitch(), next.get(i).getPitch(), avgPitch);
            ratings[i] = rating;
        } //for i
        return ratings;
    } //neighborRatings(int avgPitch)
    
    public HexNote nextRandomStep() {
        HexNote next;
        double p = 0.1666666666666666666666666666666666666666666666666666666667;
        double r = Math.random();
        if (r < p) next = nextLeft();
        else if (r < 2*p) next = nextUpLeft();
        else if (r < 3*p) next = nextUpRight();
        else if (r < 4*p) next = nextRight();
        else if (r < 5*p) next = nextDownRight();
        else next = nextDownLeft();
        return next;
    } //nextRandomStep()
    
    public HexNote nextm2Up() {
        return nextNote(2, 0);
    } //nextm2Up()
    public HexNote nextm2Down() {
        return nextNote(-2, 0);
    } //nextm2Down()
    
    public HexNote nextM2Up() {
        return nextNote(-3, 1);
    } //nextM2Up()
    public HexNote nextM2Down() {
        return nextNote(3, -1);
    } //nextM2Down()
    
    public HexNote nextm3Up() {
        return nextNote(-1, 1);
    } //nextm3Up()
    public HexNote nextm3Down() {
        return nextNote(1, -1);
    } //nextm3Down()
    
    public HexNote nextM3Up() {
        return nextNote(1, 1);
    } //nextM3Up()
    public HexNote nextM3Down() {
        return nextNote(-1, -1);
    } //nextM3Down()
    
    public HexNote nextP4Up() {
        return nextNote(3, 1);
    } //nextP4Up()
    public HexNote nextP4Down() {
        return nextNote(-3, -1);
    } //nextP4Down()
    
    public HexNote nextTTUp() {
        return nextNote(-2, 2);
    } //nextTTUp()
    public HexNote nextTTDown() {
        return nextNote(2, -2);
    } //nextTTDown()
    
    public HexNote nextP5Up() {
        return nextNote(0, 2);
    } //nextP5Up()
    public HexNote nextP5Down() {
        return nextNote(0, -2);
    } //nextP5Down()
    
    public HexNote nextm6Up() {
        return nextNote(2, 2);
    } //nextm6Up()
    public HexNote nextm6Down() {
        return nextNote(-2, -2);
    } //nextm6Down()
    
    public HexNote nextM6Up() {
        return nextNote(-3, 3);
    } //nextM6Up()
    public HexNote nextM6Down() {
        return nextNote(3, -3);
    } //nextM6Down()
    
    public HexNote nextm7Up() {
        return nextNote(-1, 3);
    } //nextm7Up()
    public HexNote nextm7Down() {
        return nextNote(1, -3);
    } //nextm7Down()
    
    public HexNote nextM7Up() {
        return nextNote(1, 3);
    } //nextM7Up()
    public HexNote nextM7Down() {
        return nextNote(-1, -3);
    } //nextM7Down()
    
    public HexNote nextP8Up() {
        return nextNote(3, 3);
    } //nextP8Up()
    public HexNote nextP8Down() {
        return nextNote(-3, -3);
    } //nextP8Down()
    
    /**
     * method to calculate grid distance from a certain note
     * @param centerPitch
     * @return Let's just use the difference in pitch
     */
    public int distFrom(int centerPitch) {
        return Math.abs(getPitch() - centerPitch);
    } //distFrom(int)
    
} //HexNote
